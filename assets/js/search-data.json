{
  
    
        "post0": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "Lists and Dictionaries . As a quick review we used variables in the introduction last week. Variables all have a type: String, Integer, Float, List and Dictionary are some key types. In Python, variables are given a type at assignment, Types are important to understand and will impact operations, as we saw when we were required to user str() function in concatenation. . Developers often think of variables as primitives or collections. Look at this example and see if you can see hypothesize the difference between a primitive and a collection. | Take a minute and see if you can reference other elements in the list or other keys in the dictionary. Show output. | # variable of type string name = &quot;John Doe&quot; print(&quot;name&quot;, name, type(name)) # variable of type integer age = 18 print(&quot;age&quot;, age, type(age)) # variable of type float score = 90.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;, &quot;Bash&quot; ] print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[3]&quot;, langs[3], type(langs[3])) print() # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . name John Doe &lt;class &#39;str&#39;&gt; age 18 &lt;class &#39;int&#39;&gt; score 90.0 &lt;class &#39;float&#39;&gt; langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;] &lt;class &#39;list&#39;&gt; - langs[3] Bash &lt;class &#39;str&#39;&gt; person {&#39;name&#39;: &#39;John Doe&#39;, &#39;age&#39;: 18, &#39;score&#39;: 90.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;]} &lt;class &#39;dict&#39;&gt; - person[&#34;name&#34;] John Doe &lt;class &#39;str&#39;&gt; . List and Dictionary purpose . Our society is being build on information. List and Dictionaries are used to collect information. Mostly, when information is collected it is formed into patterns. As that pattern is established you will collect many instances of that pattern. . List is used to collect many | Dictionary is used to define data patterns. | Iteration is often used to process through lists. | . To start exploring more deeply into List, Dictionary and Iteration we will explore constructing a List of people and cars. . As we learned above, List is a data type: class &#39;list&#39; | A &#39;list&#39; data type has the method &#39;.append(expression)&#39; that allows you to add to the list | In the example below, the expression appended to the &#39;list&#39; is the data type: class &#39;dict&#39; | At the end, you see a fairly complicated data structure. This is a list of dictionaries. The output looks similar to JSON and we will see this often, you will be required to understand this data structure and understand the parts. Easy peasy ;). | . InfoDb1 = [] # Append to List a Dictionary of key/values related to a person and cars InfoDb1.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Mortensen&quot;, &quot;DOB&quot;: &quot;October 21&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;jmortensen@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb1.append({ &quot;FirstName&quot;: &quot;Sunny&quot;, &quot;LastName&quot;: &quot;Naidu&quot;, &quot;DOB&quot;: &quot;August 2&quot;, &quot;Residence&quot;: &quot;Temecula&quot;, &quot;Email&quot;: &quot;snaidu@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;4Runner&quot;] }) # Append to List a 3rd Dictionary of key/values InfoDb1.append({ &quot;FirstName&quot;: &quot;Samit&quot;, &quot;LastName&quot;: &quot;Poojary&quot;, &quot;DOB&quot;: &quot;February 24&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;samitpoojary@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;Pagani Zonda HP Barchetta&quot;] }) # Append to List a 4th Dictionary of key/values InfoDb1.append({ &quot;FirstName&quot;: &quot;Harish&quot;, &quot;LastName&quot;: &quot;Poojary&quot;, &quot;DOB&quot;: &quot;December 4&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;hpoojary@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;Porsche Cayenne GTS Turbo&quot;] }) # Print the data structure print(InfoDb1) . [{&#39;FirstName&#39;: &#39;John&#39;, &#39;LastName&#39;: &#39;Mortensen&#39;, &#39;DOB&#39;: &#39;October 21&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;jmortensen@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;2015-Fusion&#39;, &#39;2011-Ranger&#39;, &#39;2003-Excursion&#39;, &#39;1997-F350&#39;, &#39;1969-Cadillac&#39;]}, {&#39;FirstName&#39;: &#39;Sunny&#39;, &#39;LastName&#39;: &#39;Naidu&#39;, &#39;DOB&#39;: &#39;August 2&#39;, &#39;Residence&#39;: &#39;Temecula&#39;, &#39;Email&#39;: &#39;snaidu@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;4Runner&#39;]}, {&#39;FirstName&#39;: &#39;Samit&#39;, &#39;LastName&#39;: &#39;Poojary&#39;, &#39;DOB&#39;: &#39;February 24&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;samitpoojary@gmail.com&#39;, &#39;Owns_Cars&#39;: [&#39;Pagani Zonda HP Barchetta&#39;]}, {&#39;FirstName&#39;: &#39;Harish&#39;, &#39;LastName&#39;: &#39;Poojary&#39;, &#39;DOB&#39;: &#39;December 4&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;hpoojary@gmail.com&#39;, &#39;Owns_Cars&#39;: [&#39;Porsche Cayenne GTS Turbo&#39;]}] . Formatted output of List/Dictionary - for loop . Managing data in Lists and Dictionaries is for the convenience of passing the data across the internet or preparing it to be stored into a database. Also, it is a great way to exchange data inside of our own programs. . Next, we will take the stored data and output it within our notebook. There are multiple steps to this process... . Preparing a function to format the data, the print_data() function receives a parameter called &quot;d_rec&quot; short for dictionary record. It then references different keys within [] square brackets. | Preparing a function to iterate through the list, the for_loop() function uses an enhanced for loop that pull record by record out of InfoDb until the list is empty. Each time through the loop it call print_data(record), which passes the dictionary record to that function. | Finally, you need to activate your function with the call to the defined function for_loop(). Functions are defined, not activated until they are called. By placing for_loop() at the left margin the function is activated. | . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb1: print_data(record) for_loop() . For loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Samit Poojary Residence: San Diego Birth Day: February 24 Cars: Pagani Zonda HP Barchetta Harish Poojary Residence: San Diego Birth Day: December 4 Cars: Porsche Cayenne GTS Turbo . Alternate methods for iteration - while loop . In coding, there are usually many ways to achieve the same result. Defined are functions illustrating using index to reference records in a list, these methods are called a &quot;while&quot; loop and &quot;recursion&quot;. . The while_loop() function contains a while loop, &quot;while i &lt; len(InfoDb):&quot;. This counts through the elements in the list start at zero, and passes the record to print_data() | . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb1): record = InfoDb1[i] print_data(record) i += 1 return while_loop() . While loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Samit Poojary Residence: San Diego Birth Day: February 24 Cars: Pagani Zonda HP Barchetta Harish Poojary Residence: San Diego Birth Day: December 4 Cars: Porsche Cayenne GTS Turbo . Calling a function repeatedly - recursion . This final technique achieves looping by calling itself repeatedly. . recursive_loop(i) function is primed with the value 0 on its activation with &quot;recursive_loop(0)&quot; | the last statement indented inside the if statement &quot;recursive_loop(i + 1)&quot; activates another call to the recursive_loop(i) function, each time i is increasing | ultimately the &quot;if i &lt; len(InfoDb):&quot; will evaluate to false and the program ends | . def recursive_loop(i): if i &lt; len(InfoDb1): record = InfoDb1[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Samit Poojary Residence: San Diego Birth Day: February 24 Cars: Pagani Zonda HP Barchetta Harish Poojary Residence: San Diego Birth Day: December 4 Cars: Porsche Cayenne GTS Turbo . Hacks . Add a couple of records to the InfoDb | Try to do a for loop with an index | Pair Share code somethings creative or unique, with loops and data. Hints... Would it be possible to output data in a reverse order? | Are there other methods that can be performed on lists? | Could you create new or add to dictionary data set? Could you do it with input? | Make a quiz that stores in a List of Dictionaries. | . | . Adding Extra Records / Entries to a new InfoDb . This cell not only defines InfoDb, but also adds extra entries about people and their characteristics | . InfoDb2 = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and their height InfoDb2.append({ &quot;FirstName&quot;: &quot;Samit&quot;, &quot;LastName&quot;: &quot;Poojary&quot;, &quot;DOB&quot;: &quot;February 24&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;samit.poojary@gmail.com&quot;, &quot;Height&quot;: &quot;5&#39;8&quot; }) #adding extra records to InfoDb InfoDb2.append({ &quot;FirstName&quot;: &quot;Vardaan&quot;, &quot;LastName&quot;: &quot;Sinha&quot;, &quot;DOB&quot;: &quot;September 28&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;vardsin28@gmail.com&quot;, &quot;Height&quot;: &quot;5&#39;6&quot; }) # adding extra records InfoDb2.append({ &quot;FirstName&quot;: &quot;Alex&quot;, &quot;LastName&quot;: &quot;Kumar&quot;, &quot;DOB&quot;: &quot;May 9&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;alex.k.kumar@gmail.com&quot;, &quot;Height&quot;: &quot;6&#39;4&quot; }) # Adding one extra item to InfoDb InfoDb2.append({ &quot;FirstName&quot;: &quot;Harish&quot;, &quot;LastName&quot;: &quot;Poojary&quot;, &quot;DOB&quot;: &quot;December 4&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;hpoojary@gmail.com&quot;, &quot;Height&quot;: &quot;5&#39;9&quot; }) . Utilizing a For Loop to print out InfoDb . Within this next cell below, we wil witness the efficiency behind the utilization of a for loop, which allows us to print the data of the InfoDb without going through the annoying task of manual input. | . for item in InfoDb2: #the print function goes through each item and formats it appropriately print(item[&quot;FirstName&quot;], item[&quot;LastName&quot;], &quot; n&quot;, &quot; t&quot;, &quot;DOB:&quot;, item[&quot;DOB&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Residence:&quot;, item[&quot;Residence&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Email: &quot;, item[&quot;Email&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Height: &quot; ,item[&quot;Height&quot;]) . Samit Poojary DOB: February 24 Residence: San Diego Email: samit.poojary@gmail.com Height: 5&#39;8 Vardaan Sinha DOB: September 28 Residence: San Diego Email: vardsin28@gmail.com Height: 5&#39;6 Alex Kumar DOB: May 9 Residence: San Diego Email: alex.k.kumar@gmail.com Height: 6&#39;4 Harish Poojary DOB: December 4 Residence: San Diego Email: hpoojary@gmail.com Height: 5&#39;9 . Here is another way to run a for loop, but with a slightly different syntax: . for i in range(len(InfoDb2)): print(InfoDb2[i][&quot;FirstName&quot;], InfoDb2[i][&quot;LastName&quot;], &quot; n&quot;, &quot; t&quot;, &quot;DOB:&quot;, InfoDb2[i][&quot;DOB&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Residence:&quot;, InfoDb2[i][&quot;Residence&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Email: &quot;, InfoDb2[i][&quot;Email&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Height: &quot; ,InfoDb2[i][&quot;Height&quot;]) . Samit Poojary DOB: February 24 Residence: San Diego Email: samit.poojary@gmail.com Height: 5&#39;8 Vardaan Sinha DOB: September 28 Residence: San Diego Email: vardsin28@gmail.com Height: 5&#39;6 Alex Kumar DOB: May 9 Residence: San Diego Email: alex.k.kumar@gmail.com Height: 6&#39;4 Harish Poojary DOB: December 4 Residence: San Diego Email: hpoojary@gmail.com Height: 5&#39;9 . Recursion Statement to Print out InfoDb . This function, known as recursion, utilizes a function that also saves us time by automating the printing procedure. It does so by incorporating multiple &quot;if&quot; statements. | . n = len(InfoDb2) #function that checks to see if i is n, and if it is non, it will parse through InfoDb and print it out def output(i): if i == n: return #format string to output InfoDb in an organized foramt print(&quot;&quot;&quot;{} {} DOB: {} Residence: {} Email: {} Height: {} &quot;&quot;&quot;.format(InfoDb2[i][&quot;FirstName&quot;], InfoDb2[i][&quot;LastName&quot;], InfoDb2[i][&quot;DOB&quot;], InfoDb2[i][&quot;Residence&quot;], InfoDb2[i][&quot;Email&quot;], InfoDb2[i][&quot;Height&quot;])) #recalls the function output to go over every single person in InfoDb output(1+i) output(0) . Samit Poojary DOB: February 24 Residence: San Diego Email: samit.poojary@gmail.com Height: 5&#39;8 Vardaan Sinha DOB: September 28 Residence: San Diego Email: vardsin28@gmail.com Height: 5&#39;6 Alex Kumar DOB: May 9 Residence: San Diego Email: alex.k.kumar@gmail.com Height: 6&#39;4 Harish Poojary DOB: December 4 Residence: San Diego Email: hpoojary@gmail.com Height: 5&#39;9 . Utilizing a While Loop to print out InfoDb . The cell below uses a while loop to print the InfoDb | . number = len(InfoDb2) #temporary variable i set to 0 i = 0 while i &lt; number: #while i is less than the number or the length of InfoDb, it prints out the data in InfoDb print(InfoDb2[i][&quot;FirstName&quot;], InfoDb2[i][&quot;LastName&quot;], &quot; n&quot;, &quot; t&quot;, &quot;DOB:&quot;, InfoDb2[i][&quot;DOB&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Residence:&quot;, InfoDb2[i][&quot;Residence&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Email: &quot;, InfoDb2[i][&quot;Email&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Phone: &quot; ,InfoDb2[i][&quot;Height&quot;]) i+=1 . Samit Poojary DOB: February 24 Residence: San Diego Email: samit.poojary@gmail.com Phone: 5&#39;8 Vardaan Sinha DOB: September 28 Residence: San Diego Email: vardsin28@gmail.com Phone: 5&#39;6 Alex Kumar DOB: May 9 Residence: San Diego Email: alex.k.kumar@gmail.com Phone: 6&#39;4 Harish Poojary DOB: December 4 Residence: San Diego Email: hpoojary@gmail.com Phone: 5&#39;9 . Reversing the Outputting Order . There could be times where we would like to reverse the printing order of our list, for whatever reason. | . Hockey_Names = [&quot;Wayme Gretsky&quot;, &quot;Joe Thorton&quot;, &quot;Mario Lemieux&quot;, &quot;Alex Ovechkin&quot;, &quot;Jacques Plante&quot;, &quot;Steve Yzerman&quot;, &quot;Terry Sawchuk&quot;] #prints the list out in reverse order print(Hockey_Names[::-1]) . [&#39;Terry Sawchuk&#39;, &#39;Steve Yzerman&#39;, &#39;Jacques Plante&#39;, &#39;Alex Ovechkin&#39;, &#39;Mario Lemieux&#39;, &#39;Joe Thorton&#39;, &#39;Wayme Gretsky&#39;] . Quiz That Stores in a List of Dictionaries . import getpass, sys questions = 5 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &#39;!&#39;) print(&quot; t&quot;, &quot;You will be asked &quot; + str(questions) + &quot; questions on basketball. Be mindful that this quiz is case-sensitive!&quot;) def question_and_answer(prompt, answer): print(&quot;Question: &quot; + prompt) rsp = input() if rsp == answer : print(&quot; t&quot;, rsp + &quot; is correct!&quot;) global correct correct += 1 else: print (&quot; t&quot;, rsp + &quot; is incorrect!&quot;) return rsp Question_1 = question_and_answer(&quot;Who was the most recent three-peat in the NBA?&quot;, &quot;Lakers&quot;) Question_2 = question_and_answer(&quot;Who, as of right now, holds the title for most points scored?&quot;, &quot;Kareem Abdul-Jabaar&quot;) Question_3 = question_and_answer(&quot;Who was the most recent MVP?&quot;, &quot;Nikola Jokic&quot;) Question_4 = question_and_answer(&quot;Who were the most recent NBA Champions?&quot;, &quot;Golden State Warriors&quot;) Question_5 = question_and_answer(&quot;Who holds the record for the most points scored in a single game?&quot;, &quot;Wilt Chamberlain&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions) + &quot;!!&quot;) Quiz = [] Quiz.append({ &quot;Q_1&quot;: Question_1, &quot;Q_2&quot;: Question_2, &quot;Q_3&quot;: Question_3, &quot;Q_4&quot;: Question_4, &quot;Q_5&quot;: Question_5 }) def print_data(d_rec): print(&quot;Question 1:&quot;, d_rec[&quot;Q_1&quot;]) print(&quot;Question 2:&quot;, d_rec[&quot;Q_2&quot;]) print(&quot;Question 3:&quot;, d_rec[&quot;Q_3&quot;]) print(&quot;Question 4:&quot;, d_rec[&quot;Q_4&quot;]) print(&quot;Question 5:&quot;, d_rec[&quot;Q_5&quot;], end=&quot;&quot;) print() print(&quot;--&quot;) print(&quot;Here is a record of your quiz:&quot;) def for_loop(): print(&quot;For loop output n&quot;) for record in Quiz: print_data(record) for_loop() . Hello, samitpoojary! You will be asked 5 questions on basketball. Be mindful that this quiz is case-sensitive! Question: Who was the most recent three-peat in the NBA? Lakers is correct! Question: Who, as of right now, holds the title for most points scored? Kareem Abdul-Jabaar is correct! Question: Who was the most recent MVP? Nikola Jokic is correct! Question: Who were the most recent NBA Champions? Golden State Warriors is correct! Question: Who holds the record for the most points scored in a single game? Wilt Chamberlain is correct! samitpoojary you scored 5/5!! -- Here is a record of your quiz: For loop output Question 1: Lakers Question 2: Kareem Abdul-Jabaar Question 3: Nikola Jokic Question 4: Golden State Warriors Question 5: Wilt Chamberlain .",
            "url": "https://samitpoojary.github.io/FASTPAGES/python/jupyter/notes/2022/08/29/TP120-python_lists.html",
            "relUrl": "/python/jupyter/notes/2022/08/29/TP120-python_lists.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Some good memories",
            "content": ". Here is an image from Santorini, Greece, my most memorable and enjoyable vacation. . . This is from Bora Bora, an Island among the French Polynesia. . . Here, I am standing in front of FC Barcelona’s infamous trophy case. .",
            "url": "https://samitpoojary.github.io/FASTPAGES/markdown/personal/2022/08/28/extra-post-with-image.html",
            "relUrl": "/markdown/personal/2022/08/28/extra-post-with-image.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Python Quiz - Basic Concepts!",
            "content": "Hello! Thank you for visiting this page. Here, you will be quizzed on four of the most basic concepts Python has to offered, all of which we reviewed throughout the first 2 weeks of this class. Good luck, and enjoy! . correct = 0 #this represents the total number of questions answered correctly by the test taker def question(prompt, answer): #this function receives the answer typed in by the user, then whether or not that input was correct print (&quot;Question: &quot; + prompt) #Displays the question msg = input() if (msg).lower() == answer: #prints if the message is correct print(&quot;Nice! &quot; + msg + &quot; is correct!&quot;) #changes the correct variable global correct correct += 1 #checks to see if its false else: #prints out that the answer is false print(&quot;Sorry, but &quot; + msg + &quot; is incorrect!&quot;) #Below are the 4 different questions that this quiz will be issuing. question(&quot;What function would you use to take input from the user?&quot;, &quot;input&quot;) question(&quot;What function outputs, or displays text?&quot;, &quot;print&quot;) question(&quot;What function checks whether a statement, or condition is true/false?&quot;, &quot;if&quot;) question(&quot;What is the keyword called when defining a function?&quot;, &quot;def&quot;) Percentage = correct/4 print(&quot;You got &quot; +str(int(Percentage*100))+&quot;%! Keep working hard!&quot;) . Question: What function would you use to take input from the user? Nice! input is correct! Question: What function outputs, or displays text? Nice! print is correct! Question: What function checks whether a statement, or condition is true/false? Nice! if is correct! Question: What is the keyword called when defining a function? Nice! def is correct! You got 100%! Keep working hard! .",
            "url": "https://samitpoojary.github.io/FASTPAGES/jupyter/python/2022/08/28/Python-Quiz.html",
            "relUrl": "/jupyter/python/2022/08/28/Python-Quiz.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Validating the Installations",
            "content": "Python Confirmations! . python --version python2 --version . Python 3.9.12 Python 2.7.18 . Conda Packages! . conda list . # packages in environment at /Applications/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39hecd8cb5_1 aiohttp 3.8.1 py39hca72f7f_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39hecd8cb5_0 anaconda-navigator 2.1.4 py39hecd8cb5_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39hecd8cb5_0 appdirs 1.4.4 pyhd3eb1b0_0 applaunchservices 0.2.1 pyhd3eb1b0_0 appnope 0.1.2 py39hecd8cb5_1001 appscript 1.1.2 py39h9ed2024_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39hca72f7f_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39hecd8cb5_0 astropy 5.0.4 py39h67323c0_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bcrypt 3.2.0 py39h9ed2024_0 beautifulsoup4 4.11.1 py39hecd8cb5_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39hca72f7f_0 bkcharts 0.2 py39hecd8cb5_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h2842e9f_0 bokeh 2.4.2 py39hecd8cb5_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39h67323c0_0 brotli 1.0.9 hb1e8313_2 brotlipy 0.7.0 py39h9ed2024_1003 brunsli 0.1 h23ab428_0 bzip2 1.0.8 h1de35cc_0 c-ares 1.18.1 hca72f7f_0 ca-certificates 2022.3.29 hecd8cb5_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39hecd8cb5_2 cffi 1.15.0 py39hc55c11b_1 cfitsio 3.470 hee0f690_6 chardet 4.0.0 py39hecd8cb5_1003 charls 2.2.0 h23ab428_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39hecd8cb5_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39hecd8cb5_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.12.0 py39hecd8cb5_0 conda-build 3.21.8 py39hecd8cb5_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39hca72f7f_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39h2fd3fbb_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 hca72f7f_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39he9d5cce_0 cytoolz 0.11.0 py39h9ed2024_0 daal4py 2021.5.0 py39h24a4e90_0 dal 2021.5.0 hecd8cb5_782 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39hecd8cb5_1 debugpy 1.5.1 py39he9d5cce_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39hecd8cb5_1 entrypoints 0.4 py39hecd8cb5_0 et_xmlfile 1.1.0 py39hecd8cb5_0 executing 0.8.3 pyhd3eb1b0_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 hd8bbffd_0 frozenlist 1.2.0 py39hca72f7f_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39hecd8cb5_1 gensim 4.1.2 py39he9d5cce_0 giflib 5.2.1 haf1e3a3_0 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h23ab428_2 gmpy2 2.1.2 py39hd5de756_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h9ed2024_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39hecd8cb5_0 greenlet 1.1.1 py39h23ab428_0 grpcio 1.42.0 py39ha29bfda_0 h5py 3.6.0 py39h4a1dd59_0 hdf5 1.10.6 hdbbcd12_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 h0a44026_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39ha952a84_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39hecd8cb5_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39hecd8cb5_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 hecd8cb5_3538 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39hecd8cb5_0 ipython 8.2.0 py39hecd8cb5_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39hecd8cb5_1 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e hca72f7f_0 jq 1.6 h9ed2024_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39hecd8cb5_0 jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 haf1e3a3_2 keyring 23.4.0 py39hecd8cb5_0 kiwisolver 1.3.2 py39he9d5cce_0 krb5 1.19.2 hcd88c3b_0 lazy-object-proxy 1.6.0 py39h9ed2024_0 lcms2 2.12 hf1fd2bf_0 lerc 3.0 he9d5cce_0 libaec 1.0.4 hb1e8313_1 libarchive 3.4.2 haa3ed63_0 libcrc32c 1.1.1 hb1e8313_2 libcurl 7.82.0 h6dfd666_0 libcxx 12.0.0 h2f01273_0 libdeflate 1.8 h9ed2024_5 libedit 3.1.20210910 hca72f7f_0 libev 4.33 h9ed2024_1 libffi 3.3 hb1e8313_2 libgfortran 3.0.1 h93005f0_2 libiconv 1.16 hca72f7f_2 libidn2 2.3.2 h9ed2024_0 liblief 0.11.5 he9d5cce_1 libllvm11 11.1.0 h46f1229_1 libnghttp2 1.46.0 ha29bfda_0 libpng 1.6.37 ha441bb4_0 libprotobuf 3.19.1 h8346a28_0 libsodium 1.0.18 h1de35cc_0 libspatialindex 1.9.3 h23ab428_0 libssh2 1.10.0 h0a4fc7d_0 libtiff 4.2.0 h87d7836_0 libunistring 0.9.10 h9ed2024_0 libwebp 1.2.2 h56c3ce4_0 libwebp-base 1.2.2 hca72f7f_0 libxml2 2.9.12 hcdb78fc_0 libxslt 1.1.34 h83b36ba_0 libzopfli 1.0.3 hb1e8313_0 llvm-openmp 12.0.0 h0dcd299_1 llvmlite 0.38.0 py39h8346a28_0 locket 0.2.1 py39hecd8cb5_2 lxml 4.8.0 py39h65b224f_0 lz4-c 1.9.3 h23ab428_1 lzo 2.10 haf1e3a3_2 markdown 3.3.4 py39hecd8cb5_0 markupsafe 2.0.1 py39h9ed2024_0 matplotlib 3.5.1 py39hecd8cb5_1 matplotlib-base 3.5.1 py39hfb0c5b7_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39hecd8cb5_1 mistune 0.8.4 py39h9ed2024_1000 mkl 2021.4.0 hecd8cb5_637 mkl-service 2.4.0 py39h9ed2024_0 mkl_fft 1.3.1 py39h4ab4a9b_0 mkl_random 1.2.2 py39hb2f4e1b_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h6ef4df4_1 mpfr 4.0.2 h9066e36_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39hecd8cb5_0 msgpack-python 1.0.2 py39hf7b0b51_1 multidict 5.2.0 py39hca72f7f_2 multipledispatch 0.6.0 py39hecd8cb5_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39hecd8cb5_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39hecd8cb5_0 nbconvert 6.4.4 py39hecd8cb5_0 nbformat 5.3.0 py39hecd8cb5_0 ncurses 6.3 hca72f7f_2 nest-asyncio 1.5.5 py39hecd8cb5_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39hecd8cb5_0 numba 0.55.1 py39hae1ba45_0 numexpr 2.8.1 py39h2e5f0a9_0 numpy 1.21.5 py39h2e5f0a9_1 numpy-base 1.21.5 py39h3b1a694_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h9ed2024_0 openjpeg 2.4.0 h66ea3da_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n hca72f7f_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39he9d5cce_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39hecd8cb5_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39hecd8cb5_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 pathspec 0.7.0 py_0 patsy 0.5.2 py39hecd8cb5_1 pep8 1.7.1 py39hecd8cb5_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39hde71d04_0 pip 21.2.4 py39hecd8cb5_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39hecd8cb5_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39he9d5cce_0 psutil 5.8.0 py39h9ed2024_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39he9d5cce_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h9ed2024_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39hecd8cb5_0 pycurl 7.44.1 py39hbcfaee0_1 pydispatcher 2.0.5 py39hecd8cb5_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h9ed2024_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39hecd8cb5_0 pylint 2.9.6 py39hecd8cb5_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39he9d5cce_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h23ab428_6 pyrsistent 0.18.0 py39hca72f7f_0 pysocks 1.7.1 py39hecd8cb5_0 pytables 3.6.1 py39h648f197_1 pytest 7.1.1 py39hecd8cb5_0 python 3.9.12 hdfd78df_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h23ab428_3 python.app 3 py39hca72f7f_0 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39hca72f7f_0 pyyaml 6.0 py39hca72f7f_1 pyzmq 22.3.0 py39he9d5cce_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h468cd18_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39hecd8cb5_0 readline 8.1.2 hca72f7f_1 regex 2022.3.15 py39hca72f7f_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39hecd8cb5_1 ruamel_yaml 0.15.100 py39h9ed2024_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39hae1ba45_0 scikit-learn 1.0.2 py39hae1ba45_1 scikit-learn-intelex 2021.5.0 py39hecd8cb5_0 scipy 1.7.3 py39h8c7af03_0 scrapy 2.6.1 py39hecd8cb5_0 seaborn 0.11.2 pyhd3eb1b0_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39hecd8cb5_0 sip 4.19.13 py39h23ab428_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 he9d5cce_0 sniffio 1.2.0 py39hecd8cb5_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39hecd8cb5_1 spyder-kernels 2.1.3 py39hecd8cb5_0 sqlalchemy 1.4.32 py39hca72f7f_0 sqlite 3.38.2 h707629a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39hca72f7f_0 sympy 1.10.1 py39hecd8cb5_0 tabulate 0.8.9 py39hecd8cb5_0 tbb 2021.5.0 haf03e11_0 tbb4py 2021.5.0 py39haf03e11_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39hecd8cb5_0 terminado 0.13.1 py39hecd8cb5_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h7bc2e8c_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h9ed2024_0 tqdm 4.64.0 py39hecd8cb5_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39hca72f7f_0 typed-ast 1.4.3 py39h9ed2024_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39he9d5cce_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 haf1e3a3_0 urllib3 1.26.9 py39hecd8cb5_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h999c104_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39hecd8cb5_1 websocket-client 0.58.0 py39hecd8cb5_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h6dfd666_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39hecd8cb5_0 wrapt 1.12.1 py39h9ed2024_1 wurlitzer 3.0.2 py39hecd8cb5_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xlwings 0.24.9 py39hecd8cb5_0 xz 5.2.5 h1de35cc_0 yaml 0.2.5 haf1e3a3_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h9ed2024_0 zeromq 4.3.4 h23ab428_0 zfp 0.5.5 he9d5cce_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h4dc903c_2 zope 1.0 py39hecd8cb5_1 zope.interface 5.4.0 py39h9ed2024_0 zstd 1.4.9 h322a384_0 . echo Conda Check # this simply tests for a kernel installation test=&quot;jupyter&quot; # this is a keyword! check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: python3106jvsc74a57bd0b0fa6594d8f4cbf19f97940f81e996739fb7646882a419484c72d19e05852a7e /Users/samitpoojary/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python3106jvsc74a57bd0b0fa6594d8f4cbf19f97940f81e996739fb7646882a419484c72d19e05852a7e bash /Users/samitpoojary/Library/Jupyter/kernels/bash javascript /Users/samitpoojary/Library/Jupyter/kernels/javascript python3 /Applications/anaconda3/share/jupyter/kernels/python3 . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3106jvsc74a57bd0b0fa6594d8f4cbf19f97940f81e996739fb7646882a419484c72d19e05852a7e /Users/samitpoojary/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python3106jvsc74a57bd0b0fa6594d8f4cbf19f97940f81e996739fb7646882a419484c72d19e05852a7e python3 /Applications/anaconda3/share/jupyter/kernels/python3 . Answers to HACKS . Here, it can be seen that the &quot;conda list&quot; bash command allows users to verify all the installed tools. . Additionally, the --version parameter is used to ensure the user that eeach kernel has been updated to the latest version. . In order to update a repository, a user can run several commands, one of which being the git stage changes command. Additionally, the user may git push or sync the changes to their repository in order to find the updates on their personal GitHub Pages site. . As for automating a procedure from installation, the user may authorize a script that runs the necessary commands. .",
            "url": "https://samitpoojary.github.io/FASTPAGES/jupyter/bash/2022/08/28/Bash-Installation-Validation.html",
            "relUrl": "/jupyter/bash/2022/08/28/Bash-Installation-Validation.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Physics Lab Report",
            "content": "Lab #1: Measurements and Graphical Analysis . By: Samit Poojary . Purposes of Statement: . Given “disks” of different radii, determine the relationship between the mass and radius of the disks through graphical method. In using graphical method, we will learn about linearization and the use of it to create a mathematical model. . 1. Write a brief outline of the procedure you will use to collect data. What data would you need to collect? . Five disks were obtained and their respective radii (mm) were measured with a ruler, and their masses (g) were measured with a scale. Next, the thickness of the disk had to be found, but since it was too thin to measure, it had to be folded multiple times in order for the thickness to be measurable, and then that value was recorded. Once that value was obtained, it was divided by 2 to the power of the amount of times which the disk was folded, yielding a thickness of 1/64 mm. . 2. Answer these Qs right after your procedure. What is the precision of the meterstick I used? Explain how you know this based on the data I provided. . The precision was to the tenth of a millimeter, which is clear to tell due to the fact the 2-5-8 rule was utilized while measuring the radii. . 3. Create a data table. Make sure you give it a title and make sure you label each column. Include the units you will use. Include a column with calculated values that will “linearize” your graph. . Disk Measurements . Disk Size (descending size order) Thickness (mm) Radius (mm) Mass (g)   Radius2 (mm2) . Disk 1 (Largest) | 1/64 | 72.2 | .72 |   | 5212.84 | . Disk 2 (Second Largest) | 1/64 | 52.2 | .38 |   | 2724.84 | . Disk 3 | 1/64 | 43.5 | .25 |   | 1892.25 | . Disk 4 | 1/64 | 31.8 | .13 |   | 1011.24 | . Disk 5 | 1/64 | 23.2 | .07 |   | 538.24 | . 4. Graph #1: Non-linear graph showing the relationship between mass of disks (y axis) and radius of disks (x axis), assuming uniform thickness. Make this graph using your graphing calculator or online calculator and insert the picture of it in your document. Is this a LINEAR or NONLINEAR graph? You can provide a mathematical formula underneath your graph (just get it . from the calculator.) In our class, linear graphs provide the best relationships for us. . . Name of Graph: . Mass (g) vs. Radius2 (mm2) . This is clearly a NONLINEAR graph. . Equation: . . 5. Graph #2: Linearized graph. Make this second graph using your calculator as well. How will you “linearize” your graph? Apply a line of best fit to your graph. Insert this graph. Again, using your calculator, get a mathematical formula… . . Name of Graph: . Mass (g) vs Radius2 (mm2) . y-axis of graph: Mass (g) . x-axis of graph: Radius2 (mm2) . 6. Below your Graph #2, What is the equation for your line of best fit in the form y = slope · x + intercept? . Best fit line equation: . y = 0.0001400164x - 0.0086607248 . 7-10. Please answer the Analysis, Multiple Choice, and Synthesis Qs. Please provide a clear, short explanation if necessary. If a question requires calculations, please provide your work. . Analysis Questions: . 1. Considering the mathematic relationship between disk radius r and disk mass m, what does the independent variable from your line of best fit represent? . The independent variable from the line of best fit represents radius2. In other words, the independent variable in the y = mx + b equation is radius2, since the mass of the disk is the dependent variable. . 2. Use the mathematical relationship between mass of the disk m and the disk’s radius r to equate the coefficient values from your line of best fit to physical quantities. What are the units for each? . y = mx + b . g = (m)(mm2) + g → “b”, or the y-intercept of the graph, must be in terms of “g” (grams) . g = (m)(mm2) . m = (g) / (mm2) . Therefore, the slope in the y = mx + b equation represents the change in mass (g) for every change in radius2 (mm2). . 3. Should you adjust the best-fit line to be sure it passes through the origin, (0,0)? Justify your answer. . In a perfect world, yes. However, given the fact that this lab was performed by humans, there will undoubtedly be some margin of error existing among the measurements. Whether the ruler or meter stick was wrongfully misinterpreted, or whether an estimation took place rather than finding the exact value, these mistakes will generate a slightly corrupted graph in which the line of best fit goes through the origin (0,0). Unfortunately, it is impossible for a human-conducted lab experiment to avoid experimental error, and although these errors may be consistent (meaning that the slope of the line of best fit may still be exactly correct), it would not make sense to adjust the line of best-fit to pass through the origin. . 4. Using the slope of your best fit line and your measured value for disk thickness, determine the experimental value for the disk material density. How does this value compare to the theoretical value provided by your teacher? What is your percent error? . Note: The measured thickness is 1/64 mm. . π * p * h = 0.0001400164 g/mm2 . p = (0.0001400164 g/mm2) / (π * 1/64 mm) . p = 0.002852 g/mm3 = 2.852 g / cm3 . True density of aluminum: 2.7 g/cm3 . Percent Error: 100% * ( | 2.7 g/cm3 - 2.852 g/cm3 | ) / 2.7 g/cm3 = 5.63% | . 5. What are some of the factors that may have caused error and how might these factors have been prevented? . There are a multitude of factors that may have caused error, all of which contain the potential to drastically alter the data. One specific factor pertains directly to human error, which was inevitably abundant while conducting the experiment. Although human-error is extremely difficult to stop altogether, it can be restrained as much as possible. One way to limit the amount of human-error occurring would be to follow a specific procedure when measuring the thickness of the cylinder, that way, at least the easiest errors to make are eradicated from affecting the data. Resulting from human error, the calculated density was slightly larger than expected, as the true density of aluminum is 2.7 g/cm3 compared to the yield of 2.852 g/cm3. Another factor pertains to the physical stature of the cylinders: extremely flimsy. These cylinders were so thin (essentially a disk), that its height was extremely difficult to measure. The only way to properly measure this graph was to fold the disk in order to create as many layers as possible, making the measurement easier. However, it is highly possible that debris, or even airways, passed through the layers, thereby elongating the true measurements and yielding a larger value than expected. A possible solution to prevent this problem from occurring again would be to obtain more solid, structural cylinders to use during the lab experiment, as they would be much easier to handle as opposed to the flimsiness of the current cylinders. . Multiple Choice: (skip number 2) . 1. You perform the same experiment, but this time you plot a linear relationship between mass and the circumference of the disk rather than the radius. What is the slope of the linear plot? . Work: . Circumference of a Circle = 2πr . p = m / v . m = p * v . m = p * π * r2 * h . Slope = m / circumference2 . Slope = (p * π * r2 * h) / (2 * π * r)2 = (p * h) / 4π . Answer: E . 3. Consider an experiment in which a student measures the mass and diameter of 10 different-sized spheres, all made of the same material of uniform density p. For this student to create a linear graph relating the mass of the sphere to its radius r, the student would need to plot mass m versus which quantity? . Work: . Volume of a sphere (v) = (4/3) * π * r3 . p = m / v . m = p * v . m = p * (4/3) * π * r3 . Since p is a uniform density, and since 4/3 and π are set values, this makes m directly proportional to r3 . Answer: C . Synthesis Questions: . 1. In this experiment, if we had used disks with a greater thickness, would the slope of your best fit line have been different? Would your experimental value for density be the same? Explain. . Yes, if the disks obtained a greater thickness, then the slope would be greater. This is due to the fact that each disk would have gained additional mass. However, the experimental density value would stay the same, since the added thickness would have been noted while calculating the volume. This concept can also be thought about via the constants, for the slope is nothing but p * π * h, in which h stands for the height of the cylinder, (AKA the thickness). Therefore, an increase in thickness would just increase the value of h, thereby increasing the slope. . 2. How would your graph of m versus r^2 be different if you had used disks of the same thickness, but made out of steel? Draw a second line on your m versus r^2 plot that represents disks made of steel. . If the disks had indeed been made out of steel, the graph of m vs r2 would have a slope much larger than that of the aluminum disks. In fact, the slope may be around 3 times as large as the original graph’s slope, since the weight of steel is around 3 times as much as that of aluminum. . Graph: . . 3. Another group of students has acquired data for the exact same experiment; however, their disks are made of an unknown material that they are trying to determine. This group’s m versus r^2 data produced a line of best fit with slope equal to 122 kg/m^2. Each disk they measured had the same 0.5 cm thickness. Calculate the density of the unknown material and use the table below to help determine what material their disks are made of. . . Thickness = 0.5 cm . 122 kg/m2 * 1 m2/10000 cm2 * 1000 g/kg = 12.2 g/cm2 . 12.2 g/cm2 = p * π * 0.5 cm . p = 7.77 g/cm3 or roughly 7.8 g/cm3 . Since the calculated density of the unknown material is roughly 7.77 g/cm3, and since the density of iron is 7.78 g/cm3, it is safe to infer that the unknown material is indeed iron. .",
            "url": "https://samitpoojary.github.io/FASTPAGES/2022/08/25/Physics-Lab-Report.html",
            "relUrl": "/2022/08/25/Physics-Lab-Report.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Personal Goals for CSP",
            "content": "My Personal Goals in this Class . In this class, I would like to accomplish several tasks: . Understand how to navigate VS Code efficiently in order to become more effective and efficient | Understand the concepts of Python and its concepts in order to be able to apply it into real-world issues | Have fun while doing it! | .",
            "url": "https://samitpoojary.github.io/FASTPAGES/markdown/personal/2022/08/22/another-markdown-post.html",
            "relUrl": "/markdown/personal/2022/08/22/another-markdown-post.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "First Jupyter Notebook",
            "content": ". First Jupyter Notebook (Python) . Printing &quot;Hello everyone! My name is Samit.&quot; using Python . print(&quot;Hello everyone! My name is Samit, and I&#39;m ready to learn more about Python and its concepts.&quot;) . Hello everyone! My name is Samit, and I&#39;m ready to learn more about Python and its concepts. .",
            "url": "https://samitpoojary.github.io/FASTPAGES/jupyter/2022/08/21/first-jupyter-notebook.html",
            "relUrl": "/jupyter/2022/08/21/first-jupyter-notebook.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://samitpoojary.github.io/FASTPAGES/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post8": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup by Samit . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://samitpoojary.github.io/FASTPAGES/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  

  
      ,"page2": {
          "title": "APCSP Notes!",
          "content": "Week 0 . Tool Setup | PowerShell cd = change directory | code . = open VSCode via terminal | ls = list files | . | Markdown (md) #, ##, ### = types of font (Heading, Subheading, etc.) | Use hyphens to create a bullet point | . | . Week 1 . Intro to Python print () = displays whatever is in quotations | def = defines a function which can then be used in the future | . | . Week 2 . | . Coding Through Terminal . (base) samitpoojary@Samits-MacBook-Pro ~ % cd vscode (base) samitpoojary@Samits-MacBook-Pro vscode % cd fastpages (base) samitpoojary@Samits-MacBook-Pro fastpages % code . . How to Create a Notebook Using Bash: . First, enter vscode through terminal . | Use these commands with python: . | echo &quot;Using conditional statement to create a project directory and project&quot; # Variable section export project_dir=$HOME/vscode # change vscode to different name to test git clone export project=$project_dir/APCSP # change APCSP to name of project from git clone export project_repo=&quot;https://github.com/nighthawkcoders/APCSP.git&quot; # change to project of choice cd ~ # start in home directory # Conditional block to make a project directory if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exists... makinng directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Conditional block to git clone a project from project_repo if [ ! -d $project ] then echo &quot;Directory $project does not exists... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; .",
          "url": "https://samitpoojary.github.io/FASTPAGES/notes/",
          "relUrl": "/notes/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "About Me!",
          "content": "My Personal Goals in this Class . Hello! . I am Samit Poojary, a Junior here at Del Norte. | . In this class, I would like to accomplish several tasks: . Understand how to navigate VS Code efficiently in order to become more effective and efficient | Understand the concepts of Python and its concepts in order to be able to apply it into real-world issues | Have fun while doing it! | .",
          "url": "https://samitpoojary.github.io/FASTPAGES/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  
  

  
  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://samitpoojary.github.io/FASTPAGES/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}